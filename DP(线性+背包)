#include<bits\stdc++.h> //DP
using namespace std;
/*LIS*/
int dp[maxn];
int a[maxn],ans;
int main()
{
    cin>>n;
    for(int i=0;i<n;i++)
        cin>>a[i];
    memset(dp,0,sizeof(dp));
    for(int i=1;i<n;i++)
    {
     for(int j=0;j<i;j++)
     {
       if(a[i]>a[j])
            dp[i]=max(dp[j]+1,dp[i]);
       else dp[i]=1;
     }
     ans=max(ans,dp[i]);
    }
    return 0;
}
//e.g.hdu1257
int main()
{
    int n;
    while(cin>>n)
    {
        for(int i=0;i<n;i++)
          cin>>a[i];
        memset(dp,0x3f3f3f3f,sizeof(dp));
        for(int i=0;i<n;i++)
            *lower_bound(dp,dp+n,a[i])=a[i];
        cout<<lower_bound(dp,dp+n,0x3f3f3f3f)-dp<<endl;
    }
    return 0;
}
/*LCS*/
string s,t;
int lens,lent,dp[maxn][maxn];
int main()
{
    while(cin>>S>>t)
    {
        lens=s.length();
        lent=t.length();
        memset(dp,0,sizeof(dp));
        for(int i=0;i<lens;i++)
         for(int j=0;j<lent;j++)
         {
           if(s[i]==t[j])dp[i+1][j+1]=dp[i][j]+1;
           else
                dp[i+1][j+1]=max(dp[i+1][j],dp[i][j+1]);
         }
         cout<<dp[lens][lent]<<endl;
    }
    return 0;
}
/*01背包*/
int w[maxn],v[maxn];
int dp[maxw];
int main()
{
    memset(dp,0,sizeof(dp));
    for(int i=0;i<n;i++)
        cin>>w[i]>>v[i];
    for(int i=0;i<n;i++)
     for(int j=m;j>=w[i];j--)
        dp[j]=max(dp[j],dp[j-w[i]]+v[i]);
    cout<<dp[m]<<endl;
}
/*完全背包*/
int dp[maxw];
int main()
{
  memset(dp,0,sizeof(dp));
  for(int i=0;i<n;i++)
    cin>>w[i]>>v[i];
  for(int i=0;i<n;i++)
    for(int j=w[i];j<=m;j++)
        dp[j]=max(dp[j],dp[j-w[i]+v[i]);  //注意区别与01背包的不同
  return 0;
}
/*多重背包*/
int main()
{
    int n,m,dp[maxw];
    cin>>m>>n;  
    for(int i=0;i<n;i++)  
        cin>>v[i]>>w[i]>>num[i];  
    memset(dp,0,sizeof(dp));  
    for(int i=0;i<n;i++)  
        for(int j=0;j<num[i];j++)  //可以用二进制进行优化
            for(int k=m;k>=v[i];k--)  
                dp[k]=max(dp[k],dp[k-v[i]]+w[i]);  
    cout<<dp[m]<<endl;  
    }  
    return 0;  
}
/*二维费用*/
dp[maxn][maxv][maxu];
dp[i][v][u]=max(dp[i-1][u][v],dp[i-1][v-a[i]][u-b[i])+w[i];
