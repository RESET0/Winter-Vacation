#include<iostream>
using namespace std;
const int maxn=1e5+5;
struct node{int f,ch[2],siz,key,cnt;}t[maxn];
int rt=0,tot=0;
void push_up(int now)
{
    t[now].siz=t[t[now].ch[0]].siz+t[t[now].ch[1]].siz+t[now].cnt;
}
void rotate(int x)
{
    int y=t[x].f;
    int z=t[y].f,kind=(t[y].ch[1]==x);
    t[z].ch[t[z].ch[1]==y]=x;
    t[x].f=z;
    t[y].ch[kind]=t[x].ch[kind^1];
    t[t[x].ch[kind^1]].f=y;
    t[x].ch[kind^1]=y;
    t[y].f=x;
    push_up(y);
    push_up(x);
}
void splay(int x,int goal)
{
  while(t[x].f!=goal)
  {
      int y=t[x].f;
      int z=t[y].f;
      if(z!=goal)
      {
          if((t[z].ch[0]==y&&t[y].ch[0]==x)||(t[z].ch[1]==y&&t[y].ch[1]==x))
          rotate(y);
          else rotate(x);
      }  //???
      rotate(x);
  }
  if(goal==0) rt=x;
}
void Insert(int v)
{
    int now=rt,fa=0; 
    while(now&&t[now].key!=v)
        fa=now,now=t[now].ch[v>t[now].key];
    if(now) t[now].cnt++;
    else {
        now=++tot;
        if(fa)
          t[fa].ch[v>t[fa].key]=now;
        t[now].ch[0]=t[now].ch[1]=0;
        t[tot].f=fa;
        t[tot].siz=t[tot].cnt=1;
        t[tot].key=v;
    }
    splay(now,0);
}
void Find(int x)
{
    int now=rt;
    if(!now) return;
    while(t[now].key!=x&&t[now].ch[x>t[now].key])
        now=t[now].ch[x>t[now].key];
    splay(now,0);
}
int Next(int x,int k)
{
  Find(x);
  int now=rt;
  if(t[now].key>x&&k) return now;
  if(t[now].key<x&&!k) return now;
  now=t[now].ch[k];
  while(t[now].ch[k^1]) now=t[now].ch[k^1];
  return now;
}
void Delet(int x)
{
  int pre=Next(x,0),nxt=Next(x,1);
  splay(pre,0);
  splay(nxt,pre);
  int del=t[nxt].ch[0];
  if(t[del].cnt>1)
  {
      t[del].cnt--;
      splay(del,0);
  }
  else 
  {
      t[nxt].ch[0]=0;
      t[del].f=t[del].cnt=t[del].siz=t[del].ch[0]=t[del].ch[1]=0;
  }
}
int kth(int k)
{
    int now=rt;
    if(t[now].siz<k) return 0;
    while(1)
    {
        int x=t[now].ch[0];
        if(k>t[x].siz+t[now].cnt)
        {
            k-=t[x].siz+t[now].cnt;
            now=t[now].ch[1];
        }
        else 
        {
            if(t[x].siz>=k)
              now=x;
            else 
              return t[now].key;
        }
    }
}
int main()
{
    int n,opt,x;
    Insert(+2147483647);
    Insert(-2147483647);
    scanf("%d",&n);
    while(n--)
    {
        scanf("%d %d",&opt,&x);
        if(opt==1) Insert(x);
        else if(opt==2) Delet(x);
        else if(opt==3) {Find(x);printf("%d\n",t[t[rt].ch[0]].siz);}
        else if(opt==4) printf("%d\n",kth(x+1));
        else if(opt==5) printf("%d\n",t[Next(x,0)].key);
        else if(opt==6) printf("%d\n",t[Next(x,1)].key);
    }
}
